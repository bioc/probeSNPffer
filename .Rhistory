devtools::use_package('GenomicRanges')
devtools::load_all(
)
installed.packages("devtools")
?devtools
document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
use_package("GenomicRanges")
use_package("GenomicRanges")
devtools::use_package("GenomicRanges")
install.packages("usethis")
install.packages("usethis")
use_package("GenomicRanges")
usethis::use_package("GenomicRanges")
usethis::use_package("GenomicRanges")
devtools::document()
CpG_info <- readRDS("/Users/gillianmeeks/Desktop/CpG_info.RDS")
usethis::use_data(CpG_info)
SNP_bed <- readRDS("/Users/gillianmeeks/Desktop/SNP_bed_greater3.RDS")
usethis::use_data(SNP_bed)
devtools::use_vignette("introduction")
usethis::::use_vignette("introduction")
usethis::use_vignette("introduction")
usethis::use_vignette("introduction")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=8, fig.height=7
)
library(probeSNPffer)
#CpG_info <- readRDS("/Users/gillianmeeks/Desktop/CpG_info.RDS") ### need to figure out how to make this a pre-loaded file in our package
knitr::kable(head(CpG_info,5)) # how do we left-align this?
library(probeSNPffer)
install.packages(probeSNPffer)
install.packages("probeSNPffer")
install.packages("probeSNPffer")
library(probeSNPffer)
#CpG_info <- readRDS("/Users/gillianmeeks/Desktop/CpG_info.RDS") ### need to figure out how to make this a pre-loaded file in our package
knitr::kable(head(CpG_info,5)) # how do we left-align this?
devtools::load_all()
library(probeSNPffer)
#CpG_info <- readRDS("/Users/gillianmeeks/Desktop/CpG_info.RDS") ### need to figure out how to make this a pre-loaded file in our package
knitr::kable(head(CpG_info,5)) # how do we left-align this?
usethis::use_package("dplyr")
usethis::use_package("tibble")
usethis::use_package("ggplot2")
devtools::load_all()
devtools::load_all()
install.packages("probeSNPffer")
install.packages("probeSNPffer")
devtools::install("probeSNPffer")
devtools::install("probeSNPffer")
install.packages("probeSNPffer")
install.packages("probeSNPffer")
devtools::install("probeSNPffer")
devtools::install("probeSNPffer.Rproj")
devtools::install_github("gillianmeeks/probeSNPffer")
devtools::install_github("gillianmeeks/probeSNPffer")
devtools::install_github("gillianmeeks/probeSNPffer")
devtools::install_github("gillianmeeks/probeSNPffer")
devtools::install_github("gillianmeeks/probeSNPffer")
devtools::install_github("gillianmeeks/probeSNPffer")
devtools::install_github("gillianmeeks/probeSNPffer")
install_github("gillianmeeks/probeSNPffer", subdir="pkg")
devtools::install_github("gillianmeeks/probeSNPffer", subdir="pkg")
devtools::install_github("gillianmeeks/probeSNPffer/pkg")
devtools::install_github("gillianmeeks/probeSNPffer", subdir="pkg")
devtools::install_github("gillianmeeks/probeSNPffer", subdir="pkg")
devtools::install_github("gillianmeeks/probeSNPffer", subdir="pkg")
devtools::install_github("gillianmeeks/probeSNPffer", subdir="pkg")
devtools::install_github("gillianmeeks/probeSNPffer", subdir="pkg")
devtools::install_github("gillianmeeks/probeSNPffer", subdir="pkg")
library(probeSNPffer)
?probeSNPffer
devtools::use_package("IRanges")
usethis::use_package("IRanges")
usethis::use_package("IRanges")
usethis::use_package("IRanges")
load_all()
devtools::load_all()
devtools::install_github("gillianmeeks/probeSNPffer")
library("probeSNPffer")
pks <- available.packages()
pks
devtools::install_github("gillianmeeks/probeSNPffer")
queryHits::
devtools::install_github("gillianmeeks/probeSNPffer")
data(probeSNPffer)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=8, fig.height=7
)
library(probeSNPffer)
knitr::kable(head(CpG_info,5)) # how do we left-align this?
flag.overlap(CpG_info, SNP_bed)
IRanges
install.package("IRanges")
install.packages("IRanges")
install.packages("IRanges")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=8, fig.height=7
)
CpG_probe_bed <- extract.probe.regions(manifest_anno_object = CpG_info)
CpG_probe_bed <- extract.probe.regions(manifest_anno_object = CpG_info)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=8, fig.height=7
)
library(probeSNPffer)
knitr::kable(head(CpG_info,5)) # how do we left-align this?
CpG_probe_bed <- extract.probe.regions(manifest_anno_object = CpG_info)
knitr::kable(head(CpG_probe_bed, 5)) # how do we left-align this?
knitr::kable(head(SNP_bed, 9))
CpG_SNP_intersection <- flag.overlap(probe_bed = CpG_probe_bed, SNP_bed = SNP_bed[,1:5])
View(CpG_probe_bed)
subject <- GenomicRanges::GRanges(seqnames=probe_bed$chr, ranges=IRanges(start=CpG_probe_bed$start , end=CpG_probe_bed$end))
subject <- GenomicRanges::GRanges(seqnames=probe_bed$chr, ranges=GenomicRanges::IRanges(start=CpG_probe_bed$start , end=CpG_probe_bed$end))
?GenomicFeatures::
?GenomicFeatures
??GenomicFeatures
objs <- mget(ls("GenomicRanges:base"), inherits = TRUE)
?IRanges
library(IRanges)
remove.packages("IRanges")
CpG_SNP_intersection <- flag.overlap(probe_bed = CpG_probe_bed, SNP_bed = SNP_bed[,1:5])
subject <- GenomicRanges::GRanges(seqnames=CpG_probe_bed$chr, ranges=IRanges(start=CpG_probe_bed$start , end=probe_bed$end))
subject <- GenomicRanges::GRanges(seqnames=CpG_probe_bed$chr, ranges=IRanges(start=CpG_probe_bed$start , end=CpG_probe_bed$end))
query <- GenomicRanges::GRanges(seqnames=SNP_bed[,1], ranges=IRanges(start=SNP_bed[,3], end=SNP_bed[,3]))
overlaps <- GenomicRanges::findOverlaps(query=query, subject=subject)
View(overlaps)
SNP_bed[queryHits(overlaps),]
overlaps
overlaps[,1]
type(overlaps)
SNP_bed[Hits-class::queryHits(overlaps),]
SNP_bed[S4Vectors::queryHits(overlaps),]
usethis::use_package("S4Vectors")
CpG_SNP_intersection <- flag.overlap(probe_bed = CpG_probe_bed, SNP_bed = SNP_bed[,1:5])
devtools::install_github("gillianmeeks/probeSNPffer")
install.packages("IRanges")
install.packages("IRanges")
library(IRanges)
BiocManager::install("IRanges")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=8, fig.height=7
)
CpG_SNP_intersection <- flag.overlap(probe_bed = CpG_probe_bed, SNP_bed = SNP_bed[,1:5])
# Find overlaps between SNPs and probes
message("Calculating overlap between probe list and SNP list...")
#' test documentation for flag_overlap
#' @export
flag.overlap <- function(probe_bed, SNP_bed) {
# Recode chromosome information, if necessary
if (length(grep("chr", probe_bed[,1], ignore.case=T)) > 0) {
probe_bed[,1] <- gsub("chr", "", probe_bed[,1], ignore.case=T)
}
if (length(grep("chr", SNP_bed[,1], ignore.case=T)) > 0) {
SNP_bed[,1] <- gsub("chr", "", SNP_bed[,1], ignore.case=T)
}
# Convert bed files to GRange objects
subject <- GenomicRanges::GRanges(seqnames=probe_bed$chr, ranges=IRanges::IRanges(start=probe_bed$start , end=probe_bed$end))
#changed SNP range to only be one base as GenomicRanges uses closed intervals
query <- GenomicRanges::GRanges(seqnames=SNP_bed[,1], ranges=IRanges::IRanges(start=SNP_bed[,3], end=SNP_bed[,3]))
# Find overlaps between SNPs and probes
message("Calculating overlap between probe list and SNP list...")
overlaps <- GenomicRanges::findOverlaps(query=query, subject=subject)
probe_SNP_info <- as.data.frame(matrix(nrow=length(overlaps), ncol=12))
colnames(probe_SNP_info) <- c("chr", "SNP_start", "SNP_end", "SNP_id", "SNP_ref", "SNP_alt", "CpG_start", "CpG_end", "CpG_id", "CpG_strand", "CpG_type", "CpG_pos")
probe_SNP_info[,c("chr", "SNP_start", "SNP_end", "SNP_id", "SNP_ref", "SNP_alt")] <- SNP_bed[S4Vectors::queryHits(overlaps),]
probe_SNP_info[,c("CpG_start", "CpG_end", "CpG_id", "CpG_strand", "CpG_type", "CpG_pos")] <- probe_bed[S4Vectors::subjectHits(overlaps), c("start", "end", "CpG_id", "strand", "type", "CpG_pos")]
# Calculate SNP-CpG distance
probe_SNP_info$SNP_CpG_distance <- probe_SNP_info$SNP_end - probe_SNP_info$CpG_pos
# Annotate colour channel switching SNPs
message("Annotating colour channel switching SNPs...")
probe_SNP_info$col_chan_switching <- apply(X=probe_SNP_info, MARGIN=1, FUN=check.for.cc.switch)
return(probe_SNP_info)
}
CpG_SNP_intersection <- flag.overlap(probe_bed = CpG_probe_bed, SNP_bed = SNP_bed[,1:5])
devtools::install_github("gillianmeeks/probeSNPffer")
devtools::install_github("gillianmeeks/probeSNPffer")
usethis::use_vignette(identifying_probe_SNPs_GM.Rmd)
usethis::use_vignette(file="identifying_probe_SNPs_GM.Rmd")
usethis::use_vignette("identifying_probe_SNPs_GM.Rmd")
usethis::use_vignette("introduction.R,d")
usethis::use_vignette("introduction.Rmd")
usethis::use_vignette(introduction)
usethis::use_vignette("introduction")
devtools::install_github("gillianmeeks/probeSNPffer")
vignette(package='probeSNPffer')
browseVignettes(package="probeSNPffer")
devtools::build_vignettes("introduction.Rmd")
devtools::build_vignettes(vignettes)
devtools::build_vignettes()
browseVignettes("probeSNPffer")
devtools::build_vignettes()
devtools::install_github("gillianmeeks/probeSNPffer")
browseVignettes("probeSNPffer")
tools::buildVignettes(dir = ".", tangle=TRUE)
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
file.copy(dir("vignettes", full.names=TRUE), "doc", overwrite=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
devtools::install_github("gillianmeeks/probeSNPffer")
browseVignettes(packages="probeSNPffer")
browseVignettes(probeSNPffer)
library(probeSNPffer)
?probeSNPffer
??probeSNPffer
vignette(package='probeSNPffer')
tools::buildVignettes(dir = ".", tangle=TRUE)
devtools::load_all()
devtools::install_github("gillianmeeks/probeSNPffer", build_vignettes = TRUE)
browseVignettes("probeSNPffer")
tools::buildVignettes(dir = ".", tangle=TRUE)
install package via: devtools::install_github("gillianmeeks/probeSNPffer", build_vignettes = TRUE)
devtools::install_github("gillianmeeks/probeSNPffer", build_vignettes = TRUE)
browseVignettes("probeSNPffer")
vignette(package='probeSNPffer')
vignette("identifying_probe_SNPs_introduction", package="probeSNPffer")
vignette("identifying_probe_SNPs_introduction.Rmd", package="probeSNPffer")
vignette(package='probeSNPffer')
tools::buildVignettes(dir = ".", tangle=TRUE)
vignette(package='probeSNPffer')
devtools::install_github("gillianmeeks/probeSNPffer", build_vignettes = TRUE)
vignette(package='probeSNPffer')
tools::buildVignettes(dir = ".", tangle=TRUE)
devtools::load_all()
View(flag.overlap)
devtools::install_github("gillianmeeks/probeSNPffer", build_vignettes = TRUE)
devtools::install_github("gillianmeeks/probeSNPffer", build_vignettes = TRUE, force=TRUE)
vignette(package='probeSNPffer')
clean_vignettes()
devtools::clean_vignettes()
tools::buildVignettes(dir = ".", tangle=TRUE)
vignette(probeSNPffer)
vignette(package=probeSNPffer)
vignette(package="probeSNPffer")
devtools::load_all(".")
View(flag.overlap)
View(flag.overlap)
devtools::load_all(".")
vignette(package="probeSNPffer")
devtools::build_vignettes()
devtools::load_all(".")
vignette(package="probeSNPffer")
browseVignettes(package = "Biostrings")
browseVignettes(package = "probeSNPffer")
devtools::install_github("gillianmeeks/probeSNPffer", build_vignettes = TRUE)
browseVignettes(package = "probeSNPffer")
head(CpG_info)
head(probeSNPffer::CpG_info)
cd ..
